// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ssip_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SSIP;

public final class COMCTRLPrxHelper extends Ice.ObjectPrxHelperBase implements COMCTRLPrx
{
    private static final String __pisAction_name = "pisAction";

    public int pisAction(byte[] tag)
    {
        return pisAction(tag, null, false);
    }

    public int pisAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return pisAction(tag, __ctx, true);
    }

    private int pisAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "pisAction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("pisAction");
                    __delBase = __getDelegate(false);
                    _COMCTRLDel __del = (_COMCTRLDel)__delBase;
                    return __del.pisAction(tag, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_pisAction(byte[] tag)
    {
        return begin_pisAction(tag, null, false, null);
    }

    public Ice.AsyncResult begin_pisAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return begin_pisAction(tag, __ctx, true, null);
    }

    public Ice.AsyncResult begin_pisAction(byte[] tag, Ice.Callback __cb)
    {
        return begin_pisAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_pisAction(byte[] tag, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_pisAction(tag, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_pisAction(byte[] tag, Callback_COMCTRL_pisAction __cb)
    {
        return begin_pisAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_pisAction(byte[] tag, java.util.Map<String, String> __ctx, Callback_COMCTRL_pisAction __cb)
    {
        return begin_pisAction(tag, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_pisAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__pisAction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __pisAction_name, __cb);
        try
        {
            __result.__prepare(__pisAction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSeqHelper.write(__os, tag);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_pisAction(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __pisAction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __platformAction_name = "platformAction";

    public int platformAction(byte[] tag)
    {
        return platformAction(tag, null, false);
    }

    public int platformAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return platformAction(tag, __ctx, true);
    }

    private int platformAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "platformAction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("platformAction");
                    __delBase = __getDelegate(false);
                    _COMCTRLDel __del = (_COMCTRLDel)__delBase;
                    return __del.platformAction(tag, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_platformAction(byte[] tag)
    {
        return begin_platformAction(tag, null, false, null);
    }

    public Ice.AsyncResult begin_platformAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return begin_platformAction(tag, __ctx, true, null);
    }

    public Ice.AsyncResult begin_platformAction(byte[] tag, Ice.Callback __cb)
    {
        return begin_platformAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_platformAction(byte[] tag, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_platformAction(tag, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_platformAction(byte[] tag, Callback_COMCTRL_platformAction __cb)
    {
        return begin_platformAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_platformAction(byte[] tag, java.util.Map<String, String> __ctx, Callback_COMCTRL_platformAction __cb)
    {
        return begin_platformAction(tag, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_platformAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__platformAction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __platformAction_name, __cb);
        try
        {
            __result.__prepare(__platformAction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSeqHelper.write(__os, tag);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_platformAction(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __platformAction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __scheduleAction_name = "scheduleAction";

    public int scheduleAction(byte[] tag)
    {
        return scheduleAction(tag, null, false);
    }

    public int scheduleAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return scheduleAction(tag, __ctx, true);
    }

    private int scheduleAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "scheduleAction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("scheduleAction");
                    __delBase = __getDelegate(false);
                    _COMCTRLDel __del = (_COMCTRLDel)__delBase;
                    return __del.scheduleAction(tag, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_scheduleAction(byte[] tag)
    {
        return begin_scheduleAction(tag, null, false, null);
    }

    public Ice.AsyncResult begin_scheduleAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return begin_scheduleAction(tag, __ctx, true, null);
    }

    public Ice.AsyncResult begin_scheduleAction(byte[] tag, Ice.Callback __cb)
    {
        return begin_scheduleAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_scheduleAction(byte[] tag, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_scheduleAction(tag, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_scheduleAction(byte[] tag, Callback_COMCTRL_scheduleAction __cb)
    {
        return begin_scheduleAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_scheduleAction(byte[] tag, java.util.Map<String, String> __ctx, Callback_COMCTRL_scheduleAction __cb)
    {
        return begin_scheduleAction(tag, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_scheduleAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__scheduleAction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __scheduleAction_name, __cb);
        try
        {
            __result.__prepare(__scheduleAction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSeqHelper.write(__os, tag);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_scheduleAction(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __scheduleAction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __trainPositionAction_name = "trainPositionAction";

    public int trainPositionAction(byte[] tag)
    {
        return trainPositionAction(tag, null, false);
    }

    public int trainPositionAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return trainPositionAction(tag, __ctx, true);
    }

    private int trainPositionAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "trainPositionAction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("trainPositionAction");
                    __delBase = __getDelegate(false);
                    _COMCTRLDel __del = (_COMCTRLDel)__delBase;
                    return __del.trainPositionAction(tag, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_trainPositionAction(byte[] tag)
    {
        return begin_trainPositionAction(tag, null, false, null);
    }

    public Ice.AsyncResult begin_trainPositionAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return begin_trainPositionAction(tag, __ctx, true, null);
    }

    public Ice.AsyncResult begin_trainPositionAction(byte[] tag, Ice.Callback __cb)
    {
        return begin_trainPositionAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_trainPositionAction(byte[] tag, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_trainPositionAction(tag, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_trainPositionAction(byte[] tag, Callback_COMCTRL_trainPositionAction __cb)
    {
        return begin_trainPositionAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_trainPositionAction(byte[] tag, java.util.Map<String, String> __ctx, Callback_COMCTRL_trainPositionAction __cb)
    {
        return begin_trainPositionAction(tag, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_trainPositionAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__trainPositionAction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __trainPositionAction_name, __cb);
        try
        {
            __result.__prepare(__trainPositionAction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSeqHelper.write(__os, tag);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_trainPositionAction(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __trainPositionAction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __wirelessPhoneAction_name = "wirelessPhoneAction";

    public int wirelessPhoneAction(byte[] tag)
    {
        return wirelessPhoneAction(tag, null, false);
    }

    public int wirelessPhoneAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return wirelessPhoneAction(tag, __ctx, true);
    }

    private int wirelessPhoneAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "wirelessPhoneAction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("wirelessPhoneAction");
                    __delBase = __getDelegate(false);
                    _COMCTRLDel __del = (_COMCTRLDel)__delBase;
                    return __del.wirelessPhoneAction(tag, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_wirelessPhoneAction(byte[] tag)
    {
        return begin_wirelessPhoneAction(tag, null, false, null);
    }

    public Ice.AsyncResult begin_wirelessPhoneAction(byte[] tag, java.util.Map<String, String> __ctx)
    {
        return begin_wirelessPhoneAction(tag, __ctx, true, null);
    }

    public Ice.AsyncResult begin_wirelessPhoneAction(byte[] tag, Ice.Callback __cb)
    {
        return begin_wirelessPhoneAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_wirelessPhoneAction(byte[] tag, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_wirelessPhoneAction(tag, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_wirelessPhoneAction(byte[] tag, Callback_COMCTRL_wirelessPhoneAction __cb)
    {
        return begin_wirelessPhoneAction(tag, null, false, __cb);
    }

    public Ice.AsyncResult begin_wirelessPhoneAction(byte[] tag, java.util.Map<String, String> __ctx, Callback_COMCTRL_wirelessPhoneAction __cb)
    {
        return begin_wirelessPhoneAction(tag, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_wirelessPhoneAction(byte[] tag, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__wirelessPhoneAction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __wirelessPhoneAction_name, __cb);
        try
        {
            __result.__prepare(__wirelessPhoneAction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSeqHelper.write(__os, tag);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_wirelessPhoneAction(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __wirelessPhoneAction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static COMCTRLPrx checkedCast(Ice.ObjectPrx __obj)
    {
        COMCTRLPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof COMCTRLPrx)
            {
                __d = (COMCTRLPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    COMCTRLPrxHelper __h = new COMCTRLPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static COMCTRLPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        COMCTRLPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof COMCTRLPrx)
            {
                __d = (COMCTRLPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    COMCTRLPrxHelper __h = new COMCTRLPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static COMCTRLPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        COMCTRLPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    COMCTRLPrxHelper __h = new COMCTRLPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static COMCTRLPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        COMCTRLPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    COMCTRLPrxHelper __h = new COMCTRLPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static COMCTRLPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        COMCTRLPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof COMCTRLPrx)
            {
                __d = (COMCTRLPrx)__obj;
            }
            else
            {
                COMCTRLPrxHelper __h = new COMCTRLPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static COMCTRLPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        COMCTRLPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            COMCTRLPrxHelper __h = new COMCTRLPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::SSIP::COMCTRL"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _COMCTRLDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _COMCTRLDelD();
    }

    public static void __write(IceInternal.BasicStream __os, COMCTRLPrx v)
    {
        __os.writeProxy(v);
    }

    public static COMCTRLPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            COMCTRLPrxHelper result = new COMCTRLPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
